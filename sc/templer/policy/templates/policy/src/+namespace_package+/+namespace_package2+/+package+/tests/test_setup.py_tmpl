# -*- coding: utf-8 -*-
import unittest2 as unittest

from zope.site.hooks import setSite

from plone.app.testing import TEST_USER_ID
from plone.app.testing import TEST_USER_NAME
from plone.app.testing import login
from plone.app.testing import setRoles

from ${namespace_package}.${namespace_package2}.${package}.config import PRODUCTS
from ${namespace_package}.${namespace_package2}.${package}.testing import INTEGRATION_TESTING

PROJECTNAME = '${namespace_package}.${namespace_package2}.${package}'
PRODUCT_DEPENDENCIES = [item[0] for item in PRODUCTS]


class BaseTestCase(unittest.TestCase):
    """base test case to be used by other tests"""

    layer = INTEGRATION_TESTING

    def setUpUser(self):
        setRoles(self.portal, TEST_USER_ID, ['Manager', 'Editor', 'Reviewer',])
        login(self.portal, TEST_USER_NAME)

    def setUp(self):
        portal = self.layer['portal']
        setSite(portal)
        self.portal = portal
        self.qi = getattr(self.portal, 'portal_quickinstaller')
        self.pp = getattr(self.portal, 'portal_properties')
        self.wt = getattr(self.portal, 'portal_workflow')
        self.st = getattr(self.portal, 'portal_setup')
        self.setUpUser()


class TestInstall(BaseTestCase):
    """ensure product is properly installed"""

    def test_installed(self):
        self.assertTrue(self.qi.isProductInstalled(PROJECTNAME),
                        '%s not installed' % PROJECTNAME)

    def test_base_dependencies_installed(self):
        for p in PRODUCT_DEPENDENCIES:
            if p.startswith('Products'):
                p = p[9:]
            self.assertTrue(self.qi.isProductInstalled(p),
                              '%s not installed' % p)


class TestConfig(BaseTestCase):
    """ Ensure we have configured this portal """

    def test_title(self):
        self.assertTrue(self.portal.title.startswith('CHANGE ME'),
                        'Title not applied')

    def test_email_configs(self):
        self.assertTrue(self.portal.email_from_address,
                        'E-mail address not set')
        self.assertTrue(self.portal.email_from_name,
                        'E-mail name not set')

    def test_localTimeFormat(self):
        self.assertTrue(self.pp.site_properties.localTimeFormat == '%d/%m/%Y',
                        'Time format not set')

    def test_allowed_combined_language_code(self):
        self.lang = getattr(self.portal, 'portal_languages')
        self.assertTrue(self.lang.use_combined_language_codes == 1,
                        'Combined language code not supported')

    def test_language_set(self):
        self.lang = getattr(self.portal, 'portal_languages')
        self.assertTrue(self.lang.getDefaultLanguage() == 'pt-br',
                        'Language not set')


class TestUninstall(BaseTestCase):
    """ensure product is properly uninstalled"""

    def setUp(self):
        BaseTestCase.setUp(self)
        self.qi.uninstallProducts(products=[PROJECTNAME])

    def test_uninstalled(self):
        self.assertFalse(self.qi.isProductInstalled(PROJECTNAME))


def test_suite():
    return unittest.defaultTestLoader.loadTestsFromName(__name__)
